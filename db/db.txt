What is Unit Testing?
Testing of individual software components or modules. Typically, is done by the programmer.
Testing of individual software components or modules. Typically, it is performed by qualified testers.
Testing of several classes and methods. It's performed by tester.
Testing of some method. It's performed by qualified tester.
The Question's not from 22916 course. Unit Testing is Testing of individual software components or modules. Typically, is done by the programmer.
;
What is Functional Testing?
This type of testing ignores the internal parts and focus on the output is as per requirement or not.
This is a type of black-box testing. It takes into account the internal parts and focus on the output is as per requirement.
This type of testing ignores the internal parts and focus on a defined output. This is are WhiteBox Testing.
This is a type of black-box testing. It considers the internal parts of a program and focus on the output as per requirement.
The Question's not from 22916 course. This type of testing ignores the internal parts and focus on the output is as per requirement or not. Functional Tests are BlackBox Tests.
;
What is SANITY Testing?
This testing type actually determines if a new software version is performing well enough to accept it for a major testing effort.
This is testing of general parts of developed system.
This is a type of black-box testing of several modules of developed system.
None of these.
The Question's not from 22916 course. This testing type actually determines if a new software version is performing well enough to accept it for a major testing effort.
;
Difference between load and stress testing is:
Load test is focused on checking system behavior under heavy load to define a point of system's response time degradation/fails. Stress testing is focused on checking capability of hardware.
Load test is focused on checking system behavior under heavy load to define a point of Database's response time degradation/fails. Stress testing is focused on checking capability of databases.
Load test checks capability of computer resources but stress test examines maximal load of the system.
No difference between these types of testing. Both them are performance testing.
The Question's not from 22916 course. Load test is focused on checking system behavior under heavy load to define a point of system's response time degradation/fails. Stress testing is focused on checking capability of hardware.
;
Validation and Verification:
A. Verification - the process of checking whether the products of a given phase of the software development process fulfill the requirements established on previous phase. Validation answer on the question "Are we building the right product?" and involves comparison against requirements.
B. Validation - the process of checking whether the products of a given phase of the software development process fulfill the requirements established on previous phase. Verification - comparison if a system satisfies requirements.
C. Validation and verification are testing processes.
D. B + C are correct.
The Question's not from 22916 course. Validation - "Are we building the right product?". Verification - "Are we building the product right?".
;
API testing:
Testing of a set of functions and procedures that allow an access to the features or data of an application/system.
It's type of grey-box testing.
It's testing of GUI.
API testing checks how some software components should interact each other.
The Question's not from 22916 course. API Tesing is Testing of a set of functions and procedures that allow an access to the features or data of an application/system.
;
Refactoring is:
Changing a piece of code without changing its functionality.
Removing dead and unnecessary code.
Changing a code to do it more understandable
Rewriting a piece of code to do it user friendly.
The Question's not from 22916 course. The definition is changing a piece of code without changing its functionality.
;
What does external dependency mean?
An external dependency is a situation when an object in system interacts with code under test and you have no control on this.
It's external to an application component like package or library.
It's connection between developed system and a specific application.
None of these.
The Question's not from 22916 course. An external dependency is a situation when an object in system interacts with code under test and you have no control on this.
;
What is a stub and a mock object and what is the difference between them?
A mock object is a fake object in the system that concludes whether the unit test has passed or failed. A stub is a controllable replacement for an existing dependency in the system. Usually there is one mock and one or several stubs per test.
Stub and mock are fake objects used for testing of a program. There is no big difference between these objects.
A mock is external fake object that can't fail a test. A stub is a piece a code that presents some functionality. a stub may fail a test.
all are correct.
The Question's not from 22916 course. A mock object is a fake object in the system that concludes whether the unit test has passed or failed. A stub is a controllable replacement for an existing dependency in the system. Usually there is one mock and one or several stubs per test. Stub never fails tests.
;
What may create problems by using constructor-based dependency injection technique?
Code under test may require a lot of stubs to work correctly without dependencies.
A code has a lot of classes.
There is only one defined constructor per class.
A default constructor doesn't have parameters.
The Question's not from 22916 course. Code under test may require a lot of stubs to work correctly without dependencies.
;
What is debugging?
Debugging is a process that includes the following: 1. establishing exact reason and location of the error in the program and 2. fixing this error.
Debugging is a process of fixing failures of system.
Debugging is a process of finding errors with helping tools.
Debugging is scattering a lot of print statements untill we find the error.
The Question's not from 22916 course. Debugging is a 2 phase process that includes the following: 1. establishing exact reason and location of the error in the program and 2. fixing this error.
;
What is Decision Table?
Decision Table is the method used to build a complete set of test cases without using the internal structure of the program in question.
Decision Table is the method used to build a complete set of test cases based on usage of the internal structure of the program.
Decision Table is the framework used to build a complete set of test cases based on usage of the internal structure of the program.
Decision Table is one of the methods of white-box testing.
The Question's not from 22916 course. Decision Table is the method used to build a complete set of test cases without using the internal structure of the program in question.
;
With white-box testing:
You run the code with predetermined input and check that the code produces predetermined outputs.
You test boundary conditions and output of a program.
You test specific complicated algorithms.
None of these.
The Question's not from 22916 course. You run the code with predetermined input and check that the code produces predetermined outputs.
;
In Agile/Scrum development methodology, responsible for creating Product Backlog are:
Users, stakeholders, development team.
Users, stakeholders, scrum master, management.
Users, management, scrum master, development team.
The Question's not from 22916 course. Users, investors, management, quality assurance team.
;
Difference between Agile (Ag) and Waterfall (Wat) models in the product deliverability aspect:
Ag - delivered in increasing level of whole development period. Wat - delivered in the end of the development period.
None is correct.
Ag - delivered in the same level of whole development period. Wat - delivered only in the end of the development period.
Ag - delivered in the middle and in the end of the development period. Wat - delivered in the end of the development period.
The Question's not from 22916 course. 
;
Difference between Agile (Ag) and Waterfall (Wat) models in the Grade of Failure Change (GFC) aspect:
Ag - the higher level in the beginning and reduced in the final stage, Wat - in the increasing level from start to finish.
Ag - GFC is the same level during whole development period, Wat - high in the middle period.
Ag - the low level in the beginning and increasing one in the final stage, Wat - in the reducing level from start to finish.
Ag - the high level in the beginning and almost zero in the final stage, Wat - in the reducing level from start to finish.
The Question's not from 22916 course. 
;
Difference between Agile (Ag) and Waterfall (Wat) models in the Project Run Rate aspect:
Ag - the same for all period, Wat - higher in the final development period.
None is correct.
Ag - increasing iteratively for all period, Wat - higher in the final development period.
Ag - the same for all period, Wat - higher in the final development period.
The Question's not from 22916 course. 
;
What is not ERROR definition:
Error - An incorrect internal state of the system.
Error- A static defect in the software.
Error - The actual 'mistake' in the code.
Error - An incorrect syntax of a code.
The Question's not from 22916 course. 
;
Difference between software fault and failure is:
Fault is the incorrect state in the system that results from the error. Failure is the deviation from expected behavior observed by the user.
Fault demonstrates the bad state in the system because of an existing error. Failure demonstrate external incorrect state of the system.
Failure is internal incorrect behavior with respect to the requirements. Fault presents external result of the error.
Fault is internal incorrect behavior with respect to the requirements. Failure presents external result of the error.
The Question's not from 22916 course. 
;
בתהליכים אג'יליים יש חשיבות לעמידה בולידציה (validation) אך יש גדולה יותר לעמידה בוריפיקציה (verification).
לא נכון
נכון
$
$
להיפך, תהליכים אג'יליים מדגישים יותר ולידציה (עמידה בצרכי הלקוח) מאשר וריפיקציה (עמידה בדרישות שהוגדרו).
;
חבילת הבדיקות האוטומטיות ב-XP קשורה באופן הדוק ליכולת לבצע Refactoring בפרויקט. איזו תת קטגוריה של הדרישה הלא-פונקציונאלית "תחזוקתיות" (Maintainability) באה לידי ביטוי הודות לקשר הזה? (מתוך התקן ISO 25010).
Modifiability
Testability
Modularity
Reusability
$
https://raw.githubusercontent.com/Romansko/22916/main/img/maintainability.png
;
במהלך אפיון מערכת תוכנה המיועדת לנהגי אוטובוס טענה דניאלה מהפיתוח: "הלקוחות שלנו לא יודעים להגדיר כראוי את הדרישות, הם לא מבינים איך נהגים עובדים ומה היכולות שהם צריכים באמת בזמן הנסיעה!". איזו טכניקה לגילוי דרישות עשויה להתאים לסיטואציה? במידה וכמה טכניקות יכולות להתאים, יש לבחור את זו המתאימה ביותר.
תצפיות
Use cases
ראיונות
תרחישים
מי שסימן 'ראיונות' קיבל חצי ניקוד. בגלל שכתוב 'בזמן הנסיעה'  אזי השימוש בתצפיות נכון יותר.
;
תפקיד ה-Activation Bar בדיאגרמה מסוג Sequence Diagram הוא לציין את חיי האובייקט, מרגע יצירתו ועד לפינוי שלו מהמערכת.
לא נכון
נכון
$
$
הBAR מציין את משך הזמן בו האובייקט פעיל באינטראקציה ולא בהכרח את זמן החיים שלו.
;
בדיאגרמת מחלקות, מהו סוג הקשר המתאים ביותר לתיאור היחס בין מחלקה המתארת "מילה" (Word) לבין מחלקה המתארת "תו" (Character)?
Aggregation
Association
Inheritance
Composition
היחס composition איננו מתאים כיוון שתו (char) יכול להתקיים גם בפני עצמו.
;
אחד מה-practices של XP בשלב הארכיטקטורה נקרא Metaphor. באיזה ערך של XP הוא בא לתמוך?
Communication
Feedback
Simplicity
Courage
;
עבור תיאור המערכת הבא, ובהתאם לשיטה לזיהוי מחלקות מבוססת ניתוח דקדוקי (Grammatical Analysis), סמנו את הטענה הנכונה. "על כל סטודנט להירשם לשני קורסי מבוא בסמסטר הראשון, ולכל היותר להירשם לקורס אחד מתקדם."
ניתן לזהות 6 מחלקות ושדות, ופעולה אחת.
ניתן לזהות 5 מחלקות ושדות, ופעולה אחת.
ניתן לזהות 7 מחלקות ושדות, ופעולה אחת.
ניתן לזהות 8 מחלקות ושדות, ופעולה אחת.
שמות עצם ותארים (מחלקות, שדות): 'סטודנט', 'קורסי', 'מבוא', 'בסמסטר', 'הראשון'. פועל (פעולה): 'להירשם'.
;
אלו מהטענות הבאות נכונה לגבי גישת התכן של XP?
עקומת שינוי התוכנה סותרת את גישת XP בעיקר בשלבים המתקדמים של הפרויקט.
עקומת שינוי התוכנה מאששת את גישת XP בעיקר בשלבים המתקדמים של הפרויקט.
עקומת שינוי התוכנה סותרת את גישת XP בעיקר בשלבים הראשונים של הפרויקט.
עקומת שינוי התוכנה מאששת את גישת XP לאורך כל הפרויקט.
;
אלו מהטענות הבאות נכונה בנוגע ליחס בין בדיקות גרסה (Release tests) לבין בדיקות קבלה (acceptance tests)?
לשתי הבדיקות מטרה דומה, והן מתבצעות על ידי גורמים שונים.
לשתי הבדיקות מטרה שונה, אך הן מתבצעות על ידי אותו הגורם.
לשתי הבדיקות מטרה שונה, והן מתבצעות על ידי גורמים שונים.
לשתי הבדיקות מטרה דומה, והן מתבצעות על ידי אותו הגורם.
המטרה דומה: לבחון שהמערכת בכללותה עומדת בדרישות שהוגדרו, הגורמים שונים: הגוף המפתח לעומת הלקוח. נקבל גם את התשובה '..מטרה שונה..גורמים שונים' מאחר ובדיקות הגרסה מטרתן לשכנע את הגורם המפתח ובדיקות הקבלה מטרתן לשכנע את הלקוח ולכן אם המטרה מוגדרת על ציר זה אזי היא שונה.
;
שאלה: XP קורא ליצירה של חבילת בדיקות יחידה אוטומטיות (Test Suite). בפרויקט נתון יש 3 מחלקות בדיקה, כאשר בכל מחלקה מוגדרות 20 מתודות של JUnit (עם האנוטציה Test@). ברצוננו להגדיר חבילת בדיקה אחת הכוללת את כל 60 המתודות. כמה אנוטציות נוספות של JUnit עלינו להגדיר לשם כך?
2
1
3
5
יש להגדיר מחלקה אחת ריקה עם אנוטציה RunWith ו-SuiteClasses.
;
באיזה חלק של ניהול התצורה תומך מנגנון ה-Issues של גיטהאב באופן ישיר?
Change management
Version management
System building
Release management
מתוך Exam-2023A-MoedA. (מודול 7 - לא רלוונטי ל2024א).
;
לדני יש רעיון לפיצ'ר חדש ונועז למערכת עליה הוא עובד. הוא מעוניין במנגנון אשר יאפשר לו "לזרוק" את הקוד של הפיצ'ר החדש במידה והוא לא יעלה יפה. כתבו שתי פקודות שונות של git אשר יכולות לסייע לו.
git tag, git branch
git commit, git stash
git commit, git push
git stash, git push
מתוך Exam-2023A-MoedA. התקבלו תשובות נוספות שיכולות להיות גם רלוונטיות. (מודול 7 - לא רלוונטי ל2024א).
;
ב-XP נוקטים גישה מינימליסטית לכתיבה של תיעוד מוצר ושל תיעוד משתמש, ואפילו מעודדים לא לייצר תיעוד כנ"ל אלא להסתפק בקוד ובמוצר "המתעד את עצמו".
לא נכון
נכון
$
$
זה נכון לגבי תיעוד מוצר אך ודאי לא לגבי תיעוד משתמש ולכן האמירה בכללותה איננה נכונה.
;
איזה סוג של פתרונות שימוש מחדש מתאפיין בשימוש תדיר בעיקרון של Inversion of Control?
Application Frameworks
Libraries
Product Lines
COTS
;
ב-XP, בדיקות הלקוח (Customer Tests) מבצעות ולידציה (validation) למערכת המפותחת.
לא נכון
נכון
$
$
בדיקות הלקוח מפותחות על סמך סיפורי המשתמש ולכן הן מבצעות וריפיקציה ולא ולידציה. הולידציה מתבצעת באמצעות קשר עם המשתמשים.
;
איזו תת קטגוריה של הדרישה הלא-פונקציונאלית "תחזוקתיות" (Maintainability) באה לידי ביטוי בעיקר במעבר מארכיטקטורה מונוליטית לארכיטקטורת מיקרו-שירותים? (מתוך התקן ISO 25010).
Modularity
Modifiability
Analysability
Reusability
$
https://raw.githubusercontent.com/Romansko/22916/main/img/maintainability.png
;
ב-XP סיפורי המשתמש לרוב אינם מספקים את כל הפרטים הדרושים לשם מימושם.
נכון
לא נכון
$
$
;
אלו מהאמירות הבאות נכונה עבור שימוש ב-fork בדיאגרמה מסוג Activity Diagram?
במערכת הממומשת נמצא אולי קוד מקבילי
במערכת הממומשת נמצא בהכרח קוד מקבילי
במערכת הממומשת לא נמצא קוד מקבילי
אף תשובה אינה נכונה
מתוך מבחן Exam-2023A-MoedB
;
בדיאגרמת מחלקות, מהו סוג הקשר המתאים ביותר לתיאור היחס בין חתול והזנב שלו?
Composition
Association
Inheritance
Aggregation
מתוך מבחן Exam-2023A-MoedB. היחס aggregation איננו מתאים כיוון שהזנב איננו יכול להתקיים בפני עצמו.
;
היכולת להגדיר Superstate מרחיבה את יכולת הביטוי (expressiveness) של הדיאגרמה מסוג Statechart (כלומר, בעזרת היכולת ניתן למדל סוגים נוספים של מערכות).
לא נכון
נכון
$
$
יכולת זו עושה את הדיאגרמה קריאה יותר אך לא מרחיבה את יכולת הביטוי של הדיאגרמה. היא לא נותנות לנו אפשרות למדל מערכות אשר לא היינו יכולים למדל בלעדיה.
;
איזה מנהלי העבודה הבאים של XP איננו קשור באופן ישיר לארכיטקטורת המערכת?
Continuous integration
Metaphor
Exploration phase
Planning game
הקשר למשחק התכנון: בחירת הסיפורים לאיטרציה הראשונה כך שיהוו את שלד המערכת.
;
קנט בק מסביר כי "לימוד נהיגה" היא מטפורה המתאימה לתיאור תהליך ה-design של XP. בדומה ללימוד נהיגה, גם ב-XP מתחילים מיד "לנסוע", ואז "מכוונים את המכונית" תוך כדי הנסיעה "מעט לשם ומעט לשם". למה קנט בק התכוון בשני הביטויים המודגשים?
לנסוע = קידוד, "מכוונים את המכונית" = refactoring
לנסוע = קידוד, "מכוונים את המכונית" = coding standards
לנסוע = קידוד, "מכוונים את המכונית" = testing
לנסוע = קידוד, "מכוונים את המכונית" = continuous integration
;
בפרויקט פיתוח גדול נוצר בזבוז זמן עקב המתנה ממושכת של צוותים אחד לשני להשלמת מימוש בו היו תלויים. איזו פעולת תכנון ככל הנראה הוזנחה או לא נעשתה כראוי?
Interface Specification
Use Case Modeling
Design for COTS
Planning Game
זאת הפעילות המרכזית הקשורה לתיאום הדרוש בין צוותי פיתוח שונים.
;
אלו מהטענות הבאות נכונה בנוגע ליחס בין בדיקות גרסה (Release tests) לבין בדיקות מערכת (system tests)?
לשתי הבדיקות מטרה שונה, והן מתבצעות על ידי גורמים שונים.
לשתי הבדיקות מטרה שונה, אך הן מתבצעות על ידי אותו הגורם.
לשתי הבדיקות מטרה זהה, והן מתבצעות על ידי אותו הגורם.
לשתי הבדיקות מטרה זהה, והן מתבצעות על ידי גורמים שונים.
מודול 6 שקף 26, שם ניתן לראות שהמטרות אולי דומות אך לא זהות, וכן שהבדיקות מתבצעות על ידי גורמים שונים (צוות נפרד, צוות מפתח).
;
שאלה: XP קורא ליצירה של חבילת בדיקות יחידה אוטומטיות (Test Suite). בפרויקט נתון יש 3 מחלקות בדיקה, כאשר בכל מחלקה מוגדרות 20 מתודות של JUnit (עם האנוטציה Test@). ישנם שלושה סוגי בדיקות: מהירות, איטיות, בינוניות. ברצוננו להשתמש במנגנון הקטגוריות של JUnit על מנת שנוכל להריץ כל סוג בדיקות בנפרד. מה המספר המינימלי של אנוטציות של JUnit אשר עלינו להגדיר לשם כך? (ניתן להניח את ההנחות הדרושות כך שהמספר יהיה מינימלי).
12
3
20
4
הנחה: כל מחלקה מכילה מתודות מסוג אחד בלבד. לכן, דרושה אנוטציה אחת לכל מחלקה כדי לסמן את סוג הבדיקה, ועוד 3 אנוטציות לכל מחלקה אשר תכיל את בדיקות אותה הקטגוריה. סך הכל: 12
;
במערכות COTS התאמת המוצר נעשית על ידי הארגון המפתח, בעוד במערכות Product Lines התאמת המוצר נעשית על ידי הלקוח.
לא נכון
נכון
$
$
הפוך.
;
מבין התפקידים השונים של תיעוד מערכת, מהו התפקיד המזוהה ביותר עם הגישה האג'ילית?
אמצעי תקשורת בין חברי הצוות
תמיכה בשלב תחזוקת המערכת
סיפוק מידע להנהלה עבור תכנון הפרויקט
מתן מענה לדרישה רגולטורית
מתוך מבחן Exam-2023A-MoedB
;
מבין התפקידים השונים של תיעוד מערכת, מהו התפקיד המזוהה ביותר עם הגישה האג'ילית?
הדרכה למשתמשי המערכת
תמיכה בשלב תחזוקת המערכת
סיפוק מידע להנהלה עבור תכנון הפרויקט
מתן מענה לדרישה רגולטורית
;
ב-XP מדגישים את החשיבות של כתיבת בדיקות לטווח הארוך כתרומה לאיכות הפרויקט, למרות שבטווח הקצר לא מרגישים את התועלת בכתיבת הבדיקות.
לא נכון
נכון
$
$
ב-XP מדגישים שגם בטווח הקצר כתיבת בדיקות מהנה ומהירה יותר, אחרת זה לא היה עובד.
;
באיזה חלק של תהליך הפיתוח תומכת הספרייה מוקיטו (mockito)?
בדיקות
דרישות
ארכיטקטורה
תכן
;
האם המוצר גנרי או מותאם: תוכנה המסייעת לסטודנטים למדעי המחשב בתכנון הקורסים הנלמדים בסמסטר.
גנרי
מותאם
$
$
;
האם המוצר גנרי או מותאם: מערכת ניווט ייעודית לרכבי חירום כגון אמבולנסים ניידות משטרה וכבאיות.
גנרי
מותאם
$
$
;
האם המוצר גנרי או מותאם: מערכת לניהול קורסים באוניברסיטה הפתוחה.
מותאם
גנרי
$
$
;
האם המוצר גנרי או מותאם: משחק דיגיטלי בזמן אמת לקונים ברשתות "רמי לוי"
מותאם
גנרי
$
$
;
האם המוצר גנרי או מותאם: ZOOM
גנרי
מותאם
$
$
מתוך ממן11, 2023.
;
האם המוצר גנרי או מותאם: מערכת ניהול מעונות הסטודנטים בטכניון
מותאם
גנרי
$
$
מתוך ממן11, 2023.
;
האם המוצר גנרי או מותאם: מערכת לניהול מכולות שכונתיות בישראל
גנרי
מותאם
$
$
מתוך ממן11, 2023. אין מדובר במערכת אשר מפותחת עבור לקוח מסוים (בעל מכולת) אשר ביקש מערכת תוכנה לניהול המכולת שלו. הניסוח הנו "מכולות שכונתיות בישראל" כלומר כל בעל מכולת בישראל אשר יהיה מעוניין במוצר. התשובה היא אם כן – מוצר תוכנה גנרי.
;
האם המוצר גנרי או מותאם: סביבת פיתוח לאפליקציות אנדרואיד
גנרי
מותאם
$
$
מתוך ממן11, 2023.
;
האם המוצר גנרי או מותאם: מערכת לתחזוקה וניהול של שמורות טבע וגנים לאומיים בישראל
מותאם
גנרי
$
$
מתוך ממן11, 2023. מוצר מותאם כיוון שהלקוח פה הוא "רשות שמורות הטבע והגנים".
;
האם המוצר גנרי או מותאם: תוכנה המיועדת לארכיטקטים ומסייעת להם לשרטט את תכנית הבית.
גנרי
מותאם
$
$
;
האם המוצר גנרי או מותאם: מערכת ניווט לניידות של משטרת ישראל.
מותאם
גנרי
$
$
;
האם המוצר גנרי או מותאם: מערכת בקרה והתראת אש ליערות קק"ל (קרן קיימת לישראל)
מותאם
גנרי
$
$
;
האם המוצר גנרי או מותאם: משחק חשיבה דיגיטלי לילדים בגילאי בית ספר יסודי.
גנרי
מותאם
$
$
;
כל תהליך אינקרמנטלי הוא אג'ילי.
לא נכון
נכון
$
$
;
כל תהליך אג'ילי הוא אינקרמנטלי.
נכון
לא נכון
$
$
;
ב-XP יש Values (ערכים) ו-Practices (נהלי פיתוח קונקרטיים). מהו היחס הנכון ביניהם? ( לפי הסדר values – practices).
many – to – many
one – to – one 
one – to – many
many – to – one
מכל Value נגזרים כמה Practices, ובנוסף Practice יכול להיגזר מכמה Values ולא רק מאחד ולפיכך היחס של רבים לרבים מתאים.
;
מהו "ריח קוד"?
כינוי לקטע קוד עם סגנון/מבנה לא תקין.
כינוי לקטע קוד המכיל באג.
כינוי לקטע קוד הגורם לבעיית קומפילציה.
כינוי לקטע קוד לא יעיל הגורם לבעיית ביצועים.
;
להלן תיאור של אתגר אשר נמצא בחברות תוכנה המעוניינות לפתח בשיטה האג'ילית. איזו גישה נחוצה להתמודדות עם האתגר: מנהלי החברה אינם מאמינים שמערכת ללא תיעוד כתוב יכולה להיות מהימנה לאורך זמן.
Scaling Out
Scaling Up
$
$
מדובר בשינוי תפיסה של מנהלים אשר מחזיקים בתפיסה מסורתית שמערכת חייבת תיעוד כתוב, ולפיכך מה שמתאים פה זה Scaling Out אשר עוסק בשינוי התפיסתי הארגוני.
;
להלן תיאור של אתגר אשר נמצא בחברות תוכנה המעוניינות לפתח בשיטה האג'ילית. איזו גישה נחוצה להתמודדות עם האתגר: מנהלת הפרויקט מתקשה לחלק את הצוותים בצורה נכונה לאור גודלו ומורכבותו של הפרויקט.
Scaling Up
Scaling Out
$
$
;
להלן תיאור של אתגר אשר נמצא בחברות תוכנה המעוניינות לפתח בשיטה האג'ילית. איזו גישה נחוצה להתמודדות עם האתגר: הלקוחות, אשר הורגלו לפיתוח בשיטת מפל המים, אינם מגלים נכונות לזמינות גבוהה לאורך כל הפרויקט.
Scaling Out
Scaling Up
$
$
;
בחרו את הגישה הנחוצה להתמודדות עם האתגר: יש הסוברים כי בפרויקטים המפותחים בסגנון אג'ילי יש להשקיע יותר בתיעוד המערכת.
Scaling Up
Scaling Out
$
$
מתוך ממן 11, 2023.
;
בחרו את הגישה הנחוצה להתמודדות עם האתגר: אחד מהאתגרים בפיתוח אג'ילי הוא כיצד לפרק פרויקט גדול לחלקים קטנים באופן הנכון.
Scaling Up
Scaling Out
$
$
מתוך ממן 11, 2023.
;
בחרו את הגישה הנחוצה להתמודדות עם האתגר: ירדנה מתקשה להטמיע שיטות אג'יליות בחברה שלה כיוון שההנהלה הבכירה רגילה לשיטות הקלאסיות בהן עבדו במשך שנים.
Scaling Out
Scaling Up
$
$
מתוך ממן 11, 2023.
;
בחרו את הגישה הנחוצה להתמודדות עם האתגר: דני אחד המנהלים בחברה סירב לבקשת ראש הצוות לפתח בזוגות לפי שיטת XP. דני טען שאין הוא מוכן לשלם שתי משכורות לשני אנשים המפתחים יחד!
Scaling Out
Scaling Up
$
$
מתוך ממן 11, 2023.
;
היכן במפת ה"מטרו" (הרכבת התחתית) של לונדון אנו מוצאים דוגמא לאבסטרקציה טובה?
המפה איננה מציגה את תוואי המסלול האמיתי אלא מסלולים בקווים ישרים.
המפה איננה מציגה את כל קווי הרכבת התחתית אלא את המרכזיים.
המפה איננה מציגה את שני כיווני הנסיעה אלא את הכיוון הנפוץ.
המפה איננה מציגה את כל תחנות הרכבת אלא את העיקריות.
;
היחס בין מחלקה לאובייקט הוא כמו היחס בין קורס לסטודנט.
לא נכון
נכון
$
$
;
בתהליכים אינקרמנטליים מבנה המערכת עלול לאבד מאיכותו עם התקדמות הפיתוח. ציינו שני נהלי עבודה או פעילויות של XP המתמודדות עם אתגר זה.
Refactoring & Exploration Phase
Code writing & Commitment phase
Steering phase & Iteration Planning
אף תשובה לא נכונה
;
איזו אנוטציה של Junit מאפשרת לכתוב בדיקות יחידה אשר מקיימות את דרישת ה-isolated של XP?
Before@
Test@
BeforeClass@
Ignore@
האנוטציה Test@ היא זו שמאפשרת לכתוב בדיקות אך השאלה הייתה לגבי הדרישה isolated - כלומר שהבדיקות יהיו בלתי תלויות אחת בשניה, והתמיכה בכך מגיעה בעזרת האנוטציה Before@ אשר מאפשרת להקים סביב נקייה ועצמאית לכל בדיקה.
;
לאיזה חלק במחלקה ימופה באופן טבעי רכיב ה"R" של כרטיסיית ה CRC?
מתודות המחלקה (פעולות)
שם המחלקה
משתני המחלקה (מצב)
אף תשובה אינה נכונה
;
אנו מעוניינים לשנות התנהגות של מחלקה קיימת אך אין לנו גישה לקוד המחלקה. איזו תבנית תכן יכולה לעזור לנו?
Decorator
Observer
Repository
Adapter
;
איזור ה-Staging Area מקנה לגיט יתרון פונקציונאלי על פני מערכות אחרות לניהול גרסאות. לאיזה תת-קטגוריה של Functional Suitability נכון לסווג יתרון זה? (מתוך התקן ISO 25010)
Functional completeness
Functional correctness
Functional appropriateness
$
אזור הStaging מכסה טוב יותר את הצרכים של המשתמש בכך שהוא מאפשר לו לבצע commit של חלק מהקבצים ששונו ובזה בדיוק עוסקת הדרישה של Completeness. התקבלה באופן חלקי גם Functional appropriateness כיוון שהיא קרובה לכך אך זו איננה התשובה הנכונה.
;
אלו מסוגי הבדיקות הבאות איננו מפותח על ידי הצוות שמפתח את המערכת?
בדיקות גרסה
בדיקות מערכת
בדיקות יחידה
בדיקות לקוח
בדיקות גרסה אינן נכתבות על ידי הצוות המפתח. 
;
אחד מסוגי התיעוד ב-XP הוא מסמך ה-Rosetta Stone. איזה סוג של תיעוד הוא?
תיעוד מוצר ותיעוד תהליך
תיעוד משתמש ותיעוד תהליך
תיעוד משתמש ותיעוד מוצר
כל התשובות נכונות
סוג תיעוד זה מיועד למפתחים (ולא למשתמש) והוא כולל גם תיעוד של המוצר וגם תיעוד אודות תהליכי הbuild והבדיקות (שזה תיעוד תהליך).
;
למדנו על יתרון מרכזי שיש למערכות מבוזרות לניהול גרסאות על פני אלו הריכוזיות. לאיזה סוג של דרישת איכות לא פונקציונאלית ניתן לסווג את היתרון? (מתוך התקן ISO 25010)
Reliability
Usability
Performance efficiency
Compatibility
התכונה Reliability ובפרט תת הקטגוריה Recoverability קשורה לחיסרון ה One point of failure שיש למערכות ריכוזיות ואין למערכות מבוזרות.
;
בבואו לחפש מערכת תוכנה לניהול התקציב הביתי, ניסה ניסים להבין האם מערכת בשם HomeBudget מתאימה לצרכיו. מאחר ולא מצא תיעוד מתאים הסוקר את המערכת, נאלץ ניסים להתקין את המערכת ורק לאחר מכן גילה לדאבונו שהמערכת איננה מתאימה עבורו. איזה סוג של דרישת Usability מופר על ידי המערכת HomeBudget?
Appropriateness recognizability
Learnability
Operability
Accessibility
;
תהליך אינקרמנטלי יכול להיות Plan-driven.
נכון
לא נכון
$
$
;
בתהליך אינקרמנטלי מייצרים תיעוד שוטף אשר מאפשר להנהלה להתעדכן בנעשה.
לא נכון
נכון
$
$
;
מבין ארבעת הValues של XP (תקשורת, פשטות, אומץ, משוב), מהו הValue אשר מזוהה יותר מכולם עם הגישה של XP ליצירת התכן של המערכת?
פשטות
תקשורת 
אומץ
משוב
התקבל חצי ניקוד על תקשורת, שגם הוא ערך אשר קשור לתכן בXP אך לא המרכזי.
;
איזו מהשיטות הבאות איננה תורמת לגילוי דרישות המערכת (elicitation)?
Feasibility study
Prototype
Use Cases
Observation
השיטה "Feasibility study" עוסקת בשלב מקדים לבדיקה האם המערכת בת-יישום, האם כדאי לממש אותה מבחינה עסקית וכו' – אין פה ממש קשר לגילוי של דרישות.
;
לאחר פיתוח המערכת, מגיע השלב החשוב של תחזוקת המערכת. אלו מהPractices הבאים של XP הכי פחות תורם לתחזוקה טובה של המערכת?
Continuous integration
Refactoring
Test-driven development
Coding Standards
שלושת הPractices האחרים תורמים באופן מובהק לפשטות הקוד והבנת הקוד (Refactoring + Coding Standards) וכן לתיעוד שלו וליכולת לבדוק אותו בעקבות שינוי (TDD). CI נוהל חשוב המזוהה יותר עם הפיתוח עצמו ופחות עם תחזוקת המערכת. הערה: הוא יכול להיות קשור לתחזוקה אך השאלה היא מי הכי פחות תורם, שלושת האחרים מזוהים הרבה יותר עם תחזוקה ובפרט היכולת להבין את הקוד. ניתנו מחצית הנקודות לתשובות אחרות כיוון שגם בCI אפשר למצוא תרומה לתחזוקתיות אם כי לא באותה המידה (ולכן רק חצי הניקוד).
;
להלן מודלים שונים של UML. מבין המודלים הללו, מהו המודל המזוהה ביותר עם תכנות מונחה עצמים?
Sequence diagrams
Activity diagrams
Use case diagrams
State diagrams
;
להלן מודלים שונים של UML. מבין המודלים הללו, מהו המודל המזוהה ביותר עם תכנות מונחה עצמים?
Class diagrams
Activity diagrams
Use case diagrams
State diagrams
;
היחס בין מחלקה לאובייקט הוא כמו היחס בין קורס ל"הנדסת תוכנה 22916".
נכון
לא נכון
$
$
;
מבין ארבעת מבטי הארכיטקטורה של Kruchten, איזה מבט תורם למעקב אחר חלוקת עבודת הקידוד בצוות?
Development View
Logical View
Process View
Physical View
;
בJUnit, כאשר משתמשים בפונקציה assertThat, באיזו דרישה לא-פונקציונאלית אנו בעיקר תומכים?
Maintainability
Portability
Compatibility
Functional Suitability
הכוונה הראשונה היתה תחזוקתיות עקב הסינטקס הקריא יותר אשר תורם להבנת קוד הבדיקה. התקבלה גם התשובה Functional Suitability כיוון שהMatchers שבתוך ה-assertThat מאפשרים להביע בדיקות בצורה אלגנטית ומקיפה יותר (מה שיכול להתאים לסעיף הFunctional appropriateness).
;
לאיזה חלק במחלקה ימופה באופן טבעי רכיב ה"C" השני של כרטיסיית ה-CRC? 
משתני המחלקה (מצב)
מתודות המחלקה (פעולות)
מחלקת האב
כל התשובות נכונות
הC הראשון – שם המחלקה, הC השני מציין שימוש בשירותים של מחלקות אחרות – לרוב יהיה לזה ביטוי בcomposition כלומר בהחזקת אובייקטים (כמשתנים) של מחלקות אחרות ושימוש בהם.
;
לאיזה חלק במחלקה ימופה באופן טבעי רכיב ה"C" הראשון של כרטיסיית ה-CRC? 
שם המחלקה
מתודות המחלקה (פעולות)
מחלקת האב
כל התשובות נכונות
הC הראשון – שם המחלקה, הC השני מציין שימוש בשירותים של מחלקות אחרות – לרוב יהיה לזה ביטוי בcomposition כלומר בהחזקת אובייקטים (כמשתנים) של מחלקות אחרות ושימוש בהם.
;
אפיון מוקדם של הדרישות הלא פונקציונאליות יסייע להגדרה טובה יותר של ארכיטקטורת המערכת.
נכון
לא נכון
$
$
למדנו על הקשר החשוב בין דרישות לא פוקנציונאליות לארכי' המערכת ולפיכך אפיון מוקדם כנ"ל בהחלט יועיל להגדרה נכונה יותר של הארכ'.
;
במהלך פיתוח התוכנה, סביבת הפיתוח מייצרת קבצי לוג וקונפיגורציה אשר איננו רוצים להעלות למאגר הקוד (repository) הצוותי. איזה מנגנון של גיט מאפשר זאת?
gitignore
git lfs
git branch
git merge
(מודול 7 - לא רלוונטי ל2024א).
;
מהי הפקודה הדרושה כדי להעלות שינויי קוד לrepository הצוותי?
git push
git update
git synch
git pull
מתוך ממ14, 2023. (מודול 7 - לא רלוונטי ל2024א).
;
מה קורה כאשר עולה קוד לrepository הצוותי עם ההערה "Fixed #123" (עבור משימה #123)
המשימה תיסגר באופן אוטומטי
העלאת שינויי הקוד לא תשפיע על מצב המשימה
למשימה יתווסף לייבל "תוקן" באופן אוטומטי
למשימה תתווסף תגובה באופן אוטומטי
מתוך ממ14, 2023. (מודול 7 - לא רלוונטי ל2024א). קשירת המשימה מתבצעת עי הסולמית #. 
;
להלן פקודה בגיט: git commit -am "Fixed #123" - השימוש בדגל a איננו הכרחי והוא נועד לשם הנוחות בלבד.
נכון
לא נכון
$
$
מתוך ממ14, 2023. (מודול 7 - לא רלוונטי ל2024א). הדגל a חוסך את השימוש בפקודה git add.
;
להלן פקודה בגיט: git commit -am "Fixed #123" - הפקודה משפיעה על מערכת הקבצים המקומית בלבד.
נכון
לא נכון
$
$
מתוך ממ14, 2023. (מודול 7 - לא רלוונטי ל2024א).
;
מטרת בדיקות הגרסה היא לשכנע את הלקוח שגרסת המערכת איכותית ועומדת בדרישות שהוגדרו.
לא נכון
נכון
$
$
בדיקות הגרסה באות לשכנע את הספק של התוכנה ולא את הלקוח (מודול 6, שקף 25).
;
אלו מההיגדים הבאים איננו משקף את גישתו של Martin Fowler לדרישת XP שהקוד "יתעד את עצמו"?
חסרים כלים מתאימים ליישום הדרישה.
תכנות זוגי מסייע לכתיבת קוד המתעד את עצמו.
אין מפסיק דגש בתעשייה לחשיבות של יצירת קוד ברור.
מרבית הקוד הקיים איננו מתעד את עצמו
;
סווגו את הדרישה הבאה לקטגורית תקן ISO הנכונה: בעת סריקה מהירה של מוצרים, על המודל לזהות בצורה נכונה 80% מהמוצרים שנסרקו.
Functional Suitability
Compatibility
Security
Usability
Functional Suitability (Functional Correctness)
מתוך מבחן Exam-2020A-MoedB
;
סווגו את הדרישה הבאה לקטגורית תקן ISO הנכונה: בעת סריקה מהירה של מוצרים, תתקבל תשובה מהמודל תוך לא יותר מ2 שניות.
Performance efficiency
Usability
Reliability
Functional Suitability
מתוך מבחן Exam-2020A-MoedB
;
סווגו את הדרישה הבאה לקטגורית תקן ISO הנכונה: מסד הנתונים בענן מכיל את הרגלי הצריכה של המשתמשים. יש לשמור את המידע בצורה שאיננה מאפשרת גישה אליו מצד גורמים לא מורשים.
Security
Reliability
Functional Suitability
Usability
מתוך מבחן Exam-2020A-MoedB
;
סווגו את הדרישה הבאה לקטגורית תקן ISO הנכונה: על המערכת להיות זמינה לשימוש (שליחת מיילים או קבלתם) לכל הפחות ב-95% מהזמן ביממה.
Reliability
Security
Usability
Compatibility
מתוך מבחן Exam-2018A.
;
סווגו את הדרישה הבאה לקטגורית תקן ISO הנכונה: ניתן להתקין את המערכת במחשב האישי בקלות – תהליך ההתקנה יארך דקה לכל היותר.
Portability
Performance Efficiency
Maintainability
Usability
מתוך מבחן Exam-2018A.
;
סווגו את הדרישה הבאה לקטגורית תקן ISO הנכונה: כאשר שולחים מייל למשתמש A ומציינים את משתמש B ב"עותק נסתר", על המייל להגיע לשתי הכתובות, כאשר המשתמש A לא יראה שהמייל נשלח גם ל-B.
Functional Suitability
Security
Usability
Compatibility
מתוך מבחן Exam-2018A.
;
סווגו את הדרישה הבאה לקטגורית תקן ISO הנכונה: מאחר ומשתמשים רבים משתמשים בשירות הדואר OUTLOOK, על המערכת החדשה לדעת לייבא את אנשי הקשר של OUTLOOK.
Compatibility
Functional Suitability
Usability
Portability
מתוך מבחן Exam-2018A.
;
סווגו את הדרישה הבאה לקטגורית תקן ISO הנכונה: יש לספק בנוסף למערכת עובדת גם תיעוד אשר יסביר את המחלקות העיקריות ואת הקשרים ביניהן.
Maintainability
Compatibility
Portability
Usability
מתוך מבחן Exam-2018A.
;
סווגו את הדרישה הבאה לקטגורית תקן ISO הנכונה: במידה והמשתמש מנסה לשלוח מייל לכתובת אימייל לא חוקית יש לספק הודעת שגיאה ברורה.
Usability
Security
Functional Suitability 
Reliability
מתוך מבחן Exam-2018A.
;
סווגו את הדרישה הבאה לקטגורית תקן ISO הנכונה: כאשר המערכת מורידה כמות גדולה של מיילים מהשרת, יש לנצל בצורה אופטימלית את המשאבים החישוביים במחשב המקומי, ובפרט – לתמוך בעבודה מקבילית.
Performance Efficiency
Usability
Functional Suitability
Maintainability
מתוך מבחן Exam-2018A.
;
סווגו את הדרישה הבאה לקטגורית תקן ISO הנכונה: בנוסף על שמירת נתוני המיילים "בענן", על המערכת לגבות את הנתונים כדי למנוע איבודם.
Reliability
Security
Usability
Functional Suitability
מתוך מבחן Exam-2018A.
;
סווגו את הדרישה הבאה לקטגורית תקן ISO הנכונה: על ממשק המשתמש להיות נגיש בכמה שפות: עברית, אנגלית, ערבית, ורוסית. המשתמש יוכל להחליף שפה כרצונו.
Usability
Compatibility
Functional Suitability
Portability
מתוך מבחן Exam-2018A.
;
בתכנון אג'ילי הלקוח והפיתוח מגדירים את סיפורי המשתמש.
לא נכון
נכון
$
$
;
ב-Planning game של XP מתכננים את הגרסה הבאה ולא רק את האיטרציה הבאה.
נכון
לא נכון
$
$
;
בתכנון האיטרציה משתתפים המפתחים בלבד.
נכון
לא נכון
$
$
;
יש לענות בהתאם לדיאגרמת המחלקות המופיעה בתמונה. במהלך ריצת המערכת, בה המפתח עורך קובץ JAVA אחד בלבד, כמה אובייקטים יש למחלקה ConcreteSubject?
1
2
3
4
מתוך מבחן Exam-2018A / ממן13 (2024)
https://raw.githubusercontent.com/Romansko/22916/main/img/fixsoft.png
;
יש לענות בהתאם לדיאגרמת המחלקות המופיעה בתמונה. במהלך ריצת המערכת, בה המפתח עורך קובץ JAVA אחד בלבד, כמה אובייקטים יש למחלקה ConcreteObserver?
3
1
2
4
מתוך מבחן Exam-2018A / ממן13 (2024)
https://raw.githubusercontent.com/Romansko/22916/main/img/fixsoft.png
;
יש לענות בהתאם לדיאגרמת המחלקות המופיעה בתמונה. במהלך ריצת המערכת, בה המפתח עורך קובץ JAVA אחד בלבד, כמה פעמים נקראת המתודה attach?
3
1
2
4
מתוך מבחן Exam-2018A / ממן13 (2024)
https://raw.githubusercontent.com/Romansko/22916/main/img/fixsoft.png
;
כאשר המפתח מוסיף מתודה חדשה אחת בלבד, רק Observer אחד מקבל הודעת עדכון.
לא נכון
נכון
$
$
מתוך מיקודון ליאל ביטון / ממן13 (2024)
https://raw.githubusercontent.com/Romansko/22916/main/img/fixsoft.png
;
יש לענות בהתאם לדיאגרמת המחלקות המופיעה בתמונה. כאשר המפתח (המשתמש במערכת) מעדכן את קוד מחלקת הJAVA בעורך, אלו מתודות נקראות?
notify, update, getState
notify, attach, update
notify, detach, update
notify, attach, update, getState
מתוך מבחן Exam-2018A / ממן13 (2024)
https://raw.githubusercontent.com/Romansko/22916/main/img/fixsoft.png
;
הספרייה JUnit מיועדת לכתיבת בדיקות יחידה בלבד
לא נכון
נכון
$
$
אפשר בהחלט לכתוב באמצעותה בדיקות רכיבים ואף בדיקות קבלה אוטומטיות
;
בעת הרצת מחלקת בדיקה, מתודה (פונקציה) המסומנת עם BeforeClass@ עשויה לרוץ מספר פעמים.
לא נכון
נכון
$
$
;
בעת הרצת מחלקת בדיקה, מתודה (פונקציה) המסומנת עם @After עשויה לרוץ מספר פעמים
נכון
לא נכון
$
$
;
הסימון Test@ מיועד לסימון משתני בדיקה בקוד
לא נכון
נכון
$
$
סימון מתודות ולא משתנים
;
בחברת פיתוח התוכנה "קודקוד" יש הקפדה על כתיבת תיעוד לכל מודול ואף ברמת המתודות עצמן. באילו מבין תכונות האיכות הבאות הנוהל בא לתמוך?
Maintainability
Dependability
Efficiency
Acceptability
מתוך ממן11, 2023.
;
לקוח של חברת פיתוח התוכנה "קודקוד" התלונן שלעיתים הדוחו"ת אשר מפיקה התוכנה מכילים נתונים שגויים אשר אינם נמצאים כלל ב-database (או שונים מהם). בהנחה שהלקוח צודק, אילו מבין תכונות האיכות הבאות הופרה?
Dependability
Maintainability
Efficiency
Acceptability
מתוך ממן11, 2023.
;
לקוח של חברת פיתוח התוכנה "קודקוד" התלונן שלא ניתן לייצא את הדוחו"ת אשר מפיקה התוכנה לפורמט אקסל שהוא הפורמט הנפוץ לעבודה בחברה. בהנחה שהלקוח צודק, איזו מבין תכונות האיכות הבאות הופרה?
Acceptability
Maintainability
Dependability
Efficiency
מתוך ממן11, 2023.
;
אלו מהבאים איננו חיסרון של מודל פיתוח אינקרמנטלי?
קושי בהטמעה של שינויים בדרישות.
מבנה המערכת עלול להיות לא מסודר.
קושי בנראות של הפרויקט כלפי ההנהלה.
$
מתוך ממן11, 2023.
;
האם יתכן מצב בו מוצר תוכנה "עובר" את תהליך הverification אך "נכשל" בתהליך הvalidation?
כן
לא
$
$
מתוך ממן11, 2023. דוגמא: מפרט דרישות שהוגדר בצורה יותר רחבה מאשר צרכי הלקוח - ייתכן שהמוצר עונה על צרכי הלקוח אבל לא על המפרט שהוגדר.
;
תהליך Scrum עוסק בהיבטים ניהוליים של פיתוח תוכנה, וכולל גם practices (נהלים) להנדסת תוכנה נכונה.
לא נכון
נכון
$
$
מתוך ממן11, 2023.
;
מתודולוגיות אג'יליות אינן מעודדות תכנון מראש.
לא נכון
נכון
$
$
מתודולוגיות אג'יליות בהחלט מעודדות תכנון מראש אך תכנון שהוא לטווח הקצר ולא לטווח הארוך. למשל נוהל הנקרא planning game שעוסק בתכנון.
;
מתודולוגיות אג'יליות מעודדות תכנון מראש רק לחלק מהפרויקט.
נכון
לא נכון
$
$
מתוך ממן11, 2023.
;
תהליך Scrum מגדיר פעילויות, תפקידים, ו-artifacts (ישויות, חפצים). לאן "Sprint planning" שייך?
פעילויות
תפקידים
Artifacts
$
;
תהליך Scrum מגדיר פעילויות, תפקידים, ו-artifacts (ישויות, חפצים). לאן "Daily meeting" שייך?
פעילויות
תפקידים
Artifacts
$
;
תהליך Scrum מגדיר פעילויות, תפקידים, ו-artifacts (ישויות, חפצים). לאן "Sprint review" שייך?
פעילויות
תפקידים
Artifacts
$
;
תהליך Scrum מגדיר פעילויות, תפקידים, ו-artifacts (ישויות, חפצים). לאן "Sprint retrospective" שייך?
פעילויות
תפקידים
Artifacts
$
;
תהליך Scrum מגדיר פעילויות, תפקידים, ו-artifacts (ישויות, חפצים). לאן "Scrum Master" שייך?
תפקידים
פעילויות
Artifacts
$
;
תהליך Scrum מגדיר פעילויות, תפקידים, ו-artifacts (ישויות, חפצים). לאן "Product Owner" שייך?
תפקידים
פעילויות
Artifacts
$
;
תהליך Scrum מגדיר פעילויות, תפקידים, ו-artifacts (ישויות, חפצים). לאן "Team" שייך?
תפקידים
פעילויות
Artifacts
$
;
תהליך Scrum מגדיר פעילויות, תפקידים, ו-artifacts (ישויות, חפצים). לאן "Product Backlog" שייך?
Artifacts
תפקידים
פעילויות
$
;
תהליך Scrum מגדיר פעילויות, תפקידים, ו-artifacts (ישויות, חפצים). לאן "Sprint Backlog" שייך?
Artifacts
תפקידים
פעילויות
$
;
תהליך Scrum מגדיר פעילויות, תפקידים, ו-artifacts (ישויות, חפצים). לאן "Burndown chart" שייך?
Artifacts
תפקידים
פעילויות
$
;
התאימו את המונח המתאים בתהליך ה Scrum: בפעילות זו מציגים את המוצר לפני בעלי העניין השונים.
Sprint Review
Sprint Retrospective
Sprint Planning
Burn-down chart
מתוך ממן11, 2023.
;
התאימו את המונח המתאים בתהליך ה Scrum: פעילות להפקת לקחים מתהליך העבודה.
Sprint Retrospective
Sprint Review
Daily Meeting
Burn-down chart
מתוך ממן11, 2023.
;
התאימו את המונח המתאים בתהליך ה Scrum: פעילות המתבצעת כמה פעמים במהלך הספרינט.
Daily Meeting
Sprint Backlog
Sprint Review
Burn-down chart
מתוך ממן11, 2023.
;
התאימו את המונח המתאים בתהליך ה Scrum: הוא מלמד את הצוות כיצד לבצע את תהליך הScrum בצורה הנכונה ביותר.
Scrum Master
Product Owner
Scrum Review
Scrum Owner
מתוך ממן11, 2023.
;
התאימו את המונח המתאים בתהליך ה Scrum: כך נקרא אוסף משימות הפיתוח.
Sprint Backlog
Burn-down chart
Sprint Review
Sprint Planning
מתוך ממן11, 2023.
;
התאימו את המונח המתאים בתהליך ה Scrum: מתאר את התקדמות העבודה לאורך הספרינטים.
Burn-down chart
Sprint Review
Sprint Backlog
Scrum Master
מתוך ממן11, 2023.
;
התאימו את המונח המתאים בתהליך ה Scrum: אין להפריע להם/לו במהלך הספרינט.
Team
Product Owner
Scrum Master
Scrum Owner
מתוך ממן11, 2023.
;
התאימו את המונח המתאים בתהליך ה Scrum: כך נקרא אוסף סיפורי המשתמש.
Product Backlog
Sprint Backlog
Burn-down chart
Sprint Retrospective
מתוך ממן11, 2023.
;
התאימו את המונח המתאים בתהליך ה Scrum: הוא אחראי להגדיר את סיפורי המשתמש.
Product Owner
Scrum Owner
Scrum Master
Product Master
מתוך ממן11, 2023.
;
התאימו את המונח המתאים בתהליך ה Scrum: פעילות הפותחת כל ספרינט.
Sprint Planning
Sprint Review
Daily Meeting
Sprint Retrospective
מתוך ממן11, 2023.
;
בסיפורי המשתמש יש את הפרטים המספיקים למימוש הסיפור במערכת.
לא נכון
נכון
$
$
מתוך מיקודון ליאל ביטון / ממן 11 (2024)
;
ניתן להגדיר סיפור משתמש גם עבור דרישות לא פונקציונאליות.
נכון
לא נכון
$
$
מתוך מיקודון ליאל ביטון / ממן 11 (2024)
;
מסמך דרישות אשר מתקיימת בו תכונת העקביות אפשר להסיק שמתקיימת בו גם תכונת השלמות.
לא נכון
נכון
$
$
מתוך מיקודון ליאל ביטון / ממן 11 (2024)
;
לרוב, דרישות לא פונקציונאליות ממוקדות במודול אחד של המערכת. 
לא נכון
נכון
$
$
מתוך מיקודון ליאל ביטון / ממן 11 (2024)
;
אלו מהשיטות הבאות איננה קשורה לשלב זיהוי/גילוי הדרישות? 
יצירת מסמך SRS
זיהוי בעלי עניין
ראיונות
תצפיות
מתוך מיקודון ליאל ביטון / ממן 11 (2024)
;
אלו מהשיטות הבאות איננה קשורה לשלב זיהוי/גילוי הדרישות? 
יצירת Test-Cases
תצפיות
יצירת מקרי שימוש (use cases)
ראיונות
מתוך מיקודון ליאל ביטון / ממן 11 (2024)
;
מי מבצע את הפעילות "התאוששות" (Recovery) מתוך משחק התכנון (Planning Game) של XP?
Business & Development
Development
Business
$
תשובה מתוך Exam-2019A-MoedA / ממן 11 (2024). הפחתת סיפורים במידה וקצב הפיתוח נמוך מהמצופה.
;
מי מבצע את הפעילות "הכנסת סיפור חדש (במהלך הפיתוח)" (New story) מתוך משחק התכנון (Planning Game) של XP?
Business & Development
Development
Business
$
תשובה מתוך Exam-2019A-MoedA / ממן 11 (2024). הכנסת סיפור חדש לגרסה במידת הצורך.
;
מי מבצע את הפעילות "מיון לפי סיכון" (Sort by risk) מתוך משחק התכנון (Planning Game) של XP?
Development
Business & Development
Business
$
תשובה מתוך Exam-2019A-MoedA / ממן 11 (2024). מיון הסיפורים לפי הסיכון בפיתוח (בהערכת הזמנים).
;
מי מבצע את הפעילות "קביעת מהירות הפיתוח" (Set velocity) מתוך משחק התכנון (Planning Game) של XP?
Development
Business & Development
Business
$
תשובה מתוך Exam-2019A-MoedA / ממן 11 (2024). קביעת קצב הפיתוח.
;
מי מבצע את הפעילות "מיון לפי ערך" (Sort by value) מתוך משחק התכנון (Planning Game) של XP?
Business
Development
Business & Development
$
תשובה מתוך Exam-2019A-MoedA / ממן 11 (2024). מיון הסיפורים לפי חשיבות עסקית.
;
מי מבצע את הפעילות "כתיבת סיפור משתמש" (Write a story) מתוך משחק התכנון (Planning Game) של XP?
Business
Development
Business & Development
$
תשובה מתוך Exam-2019A-MoedA / ממן 11 (2024). כתיבת סיפור משתמש חדש.
;
מי מבצע את הפעילות "קביעת הScope של הגרסה" (Choose a scope) מתוך משחק התכנון (Planning Game) של XP?
Business
Development
Business & Development
$
תשובה מתוך Exam-2019A-MoedA / ממן 11 (2024). בחירת סך הסיפורים לגרסה.
;
מי מבצע את הפעילות "הערכת סיפור משתמש" (Estimate a story) מתוך משחק התכנון (Planning Game) של XP?
Development
Business
Business & Development
$
תשובה מתוך Exam-2019A-MoedA / ממן 11 (2024). הערכת זמן הפיתוח של סיפור.
;
מי מבצע את הפעילות "הגדרת איטרציה" (Iteration) מתוך משחק התכנון (Planning Game) של XP?
Business
Development
Business & Development
$
ביצוע של איטרצית פיתוח. בממן 11, 2024 המרצה כתב כי התשובה היא Business. זאת בניגוד לפתרון שנמצא עבור Exam-2019A-MoedA.
;
מי מבצע את הפעילות "הערכה מחדש" (Re-estimate) מתוך משחק התכנון (Planning Game) של XP?
Development
Business
Business & Development
$
תשובה מתוך Exam-2019A-MoedA / ממן 11 (2024). הערכה מחדש של הסיפורים במהלך הגרסה.
;
מי מבצע את הפעילות "פיצול סיפור" (Split a story) מתוך משחק התכנון (Planning Game) של XP?
Business & Development
Development
Business
$
תשובה מתוך Exam-2019A-MoedA. פיצול סיפור לשניים או יותר עקב מורכבות או קושי בהערכה. גם Business התקבל.
;
במתודולגיית XP, ייתכן ונוהל עבודה קונקרטי (practice) ייגזר מכמה ערכים (values).
נכון
לא נכון
$
$
מתוך ממן11, 2023.
;
להלן בעיה שיכולה לעלות במהלך הגדרת ארכיטקטורת המערכת. יש להתאים את השיטה או המונח אשר בא ללת מענה לבעיה: קשה להבין קוד של מערכת כאשר ממשק המשתמש מכיל גם את הלוגיקה.
Model-View-Controller
Architectural Pattern
Architectural Views
Application Architecture 
תשובה מתוך מיקודון למבחן של ליאל ביטון.
;
להלן בעיה שיכולה לעלות במהלך הגדרת ארכיטקטורת המערכת. יש להתאים את השיטה או המונח אשר בא ללת מענה לבעיה: מערכת גדולה עם בסיס קוד אחד נעשית עם השנים קשה מאוד לתחזוקה והרחבה.
Micro-Services
Architectural Pattern
Block Diagram
Model-View-Controller
תשובה מתוך מיקודון למבחן של ליאל ביטון.
;
להלן בעיה שיכולה לעלות במהלך הגדרת ארכיטקטורת המערכת. יש להתאים את השיטה או המונח אשר בא ללת מענה לבעיה: לרוב, שפת UML מורכבת מדי לשימוש עבור ארכיטקטורת המערכת.
Block Diagram
Use-Case Diagram
Micro-Services
Model-View-Controller
תשובה מתוך מיקודון למבחן של ליאל ביטון.
;
להלן בעיה שיכולה לעלות במהלך הגדרת ארכיטקטורת המערכת. יש להתאים את השיטה או המונח אשר בא ללת מענה לבעיה: קשה להעריך איכות של ארכיטקטורת מערכת לפני שהמערכת פותחה.
Architectural Pattern
Architectural Views
Planning Game
Application Architecture 
תשובה מתוך מיקודון למבחן של ליאל ביטון.
;
להלן בעיה שיכולה לעלות במהלך הגדרת ארכיטקטורת המערכת. יש להתאים את השיטה או המונח אשר בא ללת מענה לבעיה: תבנית ארכיטקטורה הנה שיטה יעילה אך לעיתים כללית מדי.
Application Architecture
Architectural Pattern
Use-Case Diagram
Architectural Views
תשובה מתוך מיקודון למבחן של ליאל ביטון.
;
להלן בעיה שיכולה לעלות במהלך הגדרת ארכיטקטורת המערכת. יש להתאים את השיטה או המונח אשר בא ללת מענה לבעיה: בתהליך אינקרמנטלי כמו XP קשה להגדיר את הארכיטקטורה בצורה נכונה באיטרציות הפיתוח הראשונות.
Exploration Phase
Planning Game
Architectural Views
Architectural Pattern
תשובה מתוך מיקודון למבחן של ליאל ביטון.
;
להלן בעיה שיכולה לעלות במהלך הגדרת ארכיטקטורת המערכת. יש להתאים את השיטה או המונח אשר בא ללת מענה לבעיה: כאשר המערכת מורכבת, קשה להגדיר ייצוג אחד בלבד של מבנה המערכת.
Architectural Views
Architectural Pattern
Application Architecture 
Block Diagram
תשובה מתוך מיקודון למבחן של ליאל ביטון.
;
לעודד לא אכפת שמפתחים אחרים ישתמשו בספרייה שלו, אפילו למוצר עם קוד סגור, כל עוד הם משתמשים בספרייה כפי שהיא ללא שום שינוי של שורת קוד, הרישיון המתאים הינו
LGPL
GPL
BSD
$
מתוך מיקודון של ליאל ביטון / ממן 13 (2024)
;
לשגית חשוב שמי שמשתמש בספרייה ייתן לה קרדיט, וכל עוד זה המצב, מבחינתה המוצר המשתמש יכול להיות מסחרי, הרישיון המתאים הינו
BSD
LGPL
GPL
$
מתוך מיקודון של ליאל ביטון / ממן 13 (2024)
;
אבי מסכים שמפתחים ישתמשו בספרייה שלו בתנאי שהמערכת אותה הם מפתחים תהיה גם היא קוד פתוח, הרישיון המתאים הינו
GPL
BSD
LGPL
$
מתוך מיקודון של ליאל ביטון / ממן 13 (2024)
;
התאימו לתיאור את סוג הבדיקה: "באמצעותן חברת התוכנה מוכיחה ללקוח שהמוצר מוכן למסירה"
Acceptance tests
Release tests
System tests
Alpha tests
מתוך מיקודון של ליאל ביטון / ממן 13 (2024)
;
התאימו לתיאור את סוג הבדיקה: "את המערכת בודקים משתמשים נבחרים"
Beta tests
Alpha tests
Release tests
System tests
מתוך מיקודון של ליאל ביטון / ממן 13 (2024)
;
התאימו לתיאור את סוג הבדיקה: "בXP אלו הבדיקות שחייבות לרוץ תמיד ב100% הצלחה"
Unit tests
Acceptance tests
Component tests
Release tests
מתוך מיקודון של ליאל ביטון / ממן 13 (2024)
;
התאימו לתיאור את סוג הבדיקה: "בודקות את המערכת בכללותה וממוקדות במציאת באגים"
System tests
Component tests
Unit tests
Alpha tests
מתוך מיקודון של ליאל ביטון / ממן 13 (2024)
;
התאימו לתיאור את סוג הבדיקה: "באמצעותן חברת התוכנה מוכיחה לעצמה שהמוצר מוכן למסירה"
Release tests
Acceptance tests
System tests
Unit tests
מתוך מיקודון של ליאל ביטון / ממן 13 (2024)
;
התאימו לתיאור את סוג הבדיקה: "בדיקות אלו בודקות את החלקים הבסיסיים ביותר של התוכנה"
Unit tests
Component tests
Alpha tests
Beta tests
מתוך מיקודון של ליאל ביטון / ממן 13 (2024)
;
התאימו לתיאור את סוג הבדיקה: "בעזרת בדיקות אלו בודקים המפתחים את המערכת כולה"
System tests
Component tests
Unit tests
Release tests
מתוך מיקודון של ליאל ביטון / ממן 13 (2024)
;
התאימו לתיאור את סוג הבדיקה: "בדיקות בהן נפגשים (פיזית) מפתחים ומשתמשים"
Alpha tests
Acceptance tests
Release tests
System tests
מתוך מיקודון של ליאל ביטון / ממן 13 (2024)
;
כאשר מריצים את הקוד, כמה פעמים תרוץ המתודה setUpClass? (מודול 6 - JUnit)
1
2
3
4
מתוך מיקודון של ליאל ביטון / ממן 13 (2024)
https://raw.githubusercontent.com/Romansko/22916/main/img/foobartests.png
;
כאשר מריצים את הקוד, כמה פעמים תרוץ המתודה tearDown? (מודול 6 - JUnit)
3
1
2
4
מתוך מיקודון של ליאל ביטון / ממן 13 (2024)
https://raw.githubusercontent.com/Romansko/22916/main/img/foobartests.png
;
כאשר מריצים את הקוד, כמה פעמים תרוץ המתודה tearDownClass? (מודול 6 - JUnit)
1
2
3
4
מתוך מיקודון של ליאל ביטון / ממן 13 (2024)
https://raw.githubusercontent.com/Romansko/22916/main/img/foobartests.png
;
כאשר מריצים את הקוד, כמה פעמים תרוץ המתודה testAnotherThing? (מודול 6 - JUnit)
1
2
3
4
מתוך מיקודון של ליאל ביטון / ממן 13 (2024)
https://raw.githubusercontent.com/Romansko/22916/main/img/foobartests.png
;
בספריית JUnit, מבחינת המפתח סימון מתודה בIgnore שקול לציון המתודה בהערה.
לא נכון
נכון
$
$
מתוך ממן14, 2023.
;
בספריית JUnit, באמצעות האנוטציה Test ניתן לבדוק דרישות פונקציונליות וכן דרישות לא פונקציונליות.
נכון
לא נכון
$
$
מתוך ממן14, 2023.
;
הספרייה JUnit מאפשרת הגדרה של חבילת בדיקות אחת לכל היותר בפרויקט.
לא נכון
נכון
$
$
מתוך ממן14, 2023.
;
בספריית JUnit, השימוש בקטגוריות מאפשר לסווג באופן שונה מתודות בדיקה, אפילו כאלה המוגדרות באותה המחלקה.
נכון
לא נכון
$
$
מתוך ממן14, 2023.
;
דוגמא ל Design Pattern היא
Observer
MVC
שינוי שם מתודה
אמינות
מתוך מיקודון של ליאל ביטון, תבנית לשימוש חוזר בשלב התכן.
;
דוגמא ל Architectural pattern היא
MVC
Observer
שינוי שם מתודה
אמינות
מתוך מיקודון של ליאל ביטון, תבנית לשימוש חוזר עבור הארכיטקטורה של המערכת.
;
המונח Reuse קשור לשלב
תכן, ארכיטקטורה, קידוד
דרישות
דרישות, תכן, ארכיטקטורה
דרישות, תכן, קידוד
מתוך מיקודון של ליאל ביטון, שימוש חוזר ברכיבים, practice חיובי ורצוי בהנדסת תוכנה.
;
המונח Metaphor קשור לשלב
ארכיטקטורה
דרישות
תכן
קידוד
מתוך מיקודון של ליאל ביטון, שיטה בXP לתקשור הארכיטקטורה של המערכת על ידי יצירת "סיפור" משותף.
;
דוגמא ל Refactoring היא
כל התשובות נכונות
שינוי שם מתודה
העברת מחלקה
$
מתוך מיקודון של ליאל ביטון, ארגון מחדש של צורת הקוד ללא שינוי פונקציונאלי.
;
המונח SRS קשור לשלב
דרישות
תכן
קידוד
ארכיטקטורה
מתוך מיקודון של ליאל ביטון, מסמך הדרישות הפורמאלי, ראשי תיבות של Software requirements specification.
;
המונח CRC Cards קשור לשלב
דרישות, תכן, ארכיטקטורה
תכן, ארכיטקטורה, קידוד
דרישות, תכן, קידוד
תכן, קידוד
מתוך מיקודון של ליאל ביטון, שיטה אג'ילית מבוססת כרטיסיות לזיהוי מחלקות במערכת.
;
המונח Sequence diagram קשור לשלב
דרישות, תכן
דרישות, ארכיטקטורה
תכן, ארכיטקטורה
תכן, קידוד
מתוך מיקודון של ליאל ביטון, דיאגרמת UML המתארת אינטראקציה בין אובייקטים ורכיבים שונים במערכת.
;
המונח Interview קשור לשלב
דרישות
תכן
קידוד
ארכיטקטורה
מתוך מיקודון של ליאל ביטון, ראיון של בעלי עניין על מנת להפיק מידע על המערכת הרצויה.
;
דוגמא לדרישות לא פונקציונליות
כל התשובות נכונות
אמינות
בטיחות
תחזוקתיות
מתוך מיקודון של ליאל ביטון, דרישת מערכת המגדירה אילוץ על הדרישות הפונקציונאליות.
;
